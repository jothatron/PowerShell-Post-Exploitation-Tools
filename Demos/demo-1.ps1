## Functions
function Get-Softwareinstall {
    param (
        [Parameter()]
        [string]$computername="$env:computername"
    )
    begin {
        $array = @()
        $UninstallKey="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" 
    }

    process {
        if (Test-Connection $computername -Count 1 -Quiet) {
            $reg=[microsoft.win32.registrykey]::OpenRemoteBaseKey('LocalMachine',$computername) 
            $regkey=$reg.OpenSubKey($UninstallKey) 
            $subkeys=$regkey.GetSubKeyNames() 
        
            foreach($key in $subkeys){
                $thisKey=$UninstallKey+"\\"+$key 
                $thisSubKey=$reg.OpenSubKey($thisKey) 
                $obj = New-Object PSObject
                $obj | Add-Member -MemberType NoteProperty -Name "DisplayName" -Value $($thisSubKey.GetValue("DisplayName"))
                $obj | Add-Member -MemberType NoteProperty -Name "DisplayVersion" -Value $($thisSubKey.GetValue("DisplayVersion"))
                $obj | Add-Member -MemberType NoteProperty -Name "InstallLocation" -Value $($thisSubKey.GetValue("InstallLocation"))
                $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value $($thisSubKey.GetValue("Publisher"))
                $obj | Add-Member -MemberType NoteProperty -Name "UninstallString" -Value $($thisSubKey.GetValue("UninstallString"))
                $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value $($thisSubKey.GetValue("InstallDate"))
                
                $array += $obj
            } 
        } else {
            Write-Error -Message "Unable to connect to $computername"
        }
    }

    end {
        $array = $array | Where {$_.DisplayName}
        $array
    }

}


## Basic System Info
Write-Host -Object "Username: $env:Username"
Write-Host -Object "Domain: $env:UserDomain"
Write-Host -Object "Computer: $env:computername"

if (([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host -Object "This user is an administrator."
} else {
    Write-Host -Object "This user is not an administrator."
}

Write-Host

## System Type
Write-Host -Object "What version of Windows is running?" -ForegroundColor Yellow
[System.Environment]::OSVersion.Version

Write-Host

Write-Host -Object "Is the system 32-bit or 64-bit?" -ForegroundColor Yellow
$intPtr = [System.Runtime.InterOpServices.Marshal]::SizeOf([System.IntPtr])

if ($intPtr -eq 4) {
    Write-Host -Object "This is a 32-bit system."
} elseif ($intPtr -eq 8)  {
    Write-Host -Object "This is a 64-bit system."
} else {
    Write-Host -Object "Woah... what is this?"
}

Write-Host

## System Information
Write-Host -Object "What is this system's role on the network?" -ForegroundColor Yellow
$computerSystem = Get-CimInstance -ClassName Win32_ComputerSystem
switch ($computerSystem.DomainRole) {
    0 {Write-Host -Object "Standalone Workstation"}
    1 {Write-Host -Object "Member workstation"}
    2 {Write-Host -Object "Standalone Server"}
    3 {Write-Host -Object "Member server"}
    4 {Write-Host -Object "Backup DC"}
    5 {Write-Host -Object "Primary DC"}
}

Write-Host

Write-Host -Object "What drives does this system have?" -ForegroundColor Yellow
Get-CimInstance -ClassName Win32_LogicalDisk | Format-Table -AutoSize

Write-Host -Object "What users does this system have?" -ForegroundColor Yellow
Get-CimInstance -Query "SELECT * FROM Win32_UserAccount WHERE DOMAIN='$env:COMPUTERNAME'" | Format-Table -AutoSize
 
Write-Host -Object "What groups does this system have?" -ForegroundColor Yellow
Get-CimInstance -Query "SELECT * FROM Win32_Group WHERE DOMAIN='$env:COMPUTERNAME'" | Format-Table -AutoSize

Write-Host -Object "Who are members of the local administrators group?" -ForegroundColor Yellow
Get-CimInstance -ClassName Win32_Group -Filter "name = 'administrators'" | Get-CimAssociatedInstance -Association Win32_GroupUser | Select Name, Caption, Domain | Format-Table -AutoSize

Write-Host -Object "What services does this system have?" -ForegroundColor Yellow
Get-CimInstance -ClassName Win32_Service | Select Name, PathName, ProcessID, State, StartName | Format-Table -AutoSize

Write-Host -Object "What software is installed on this machine?" -ForegroundColor Yellow
Get-Softwareinstall | Format-Table -AutoSize

Write-Host -Object "What is the state of AntiVirus on this machine?" -ForegroundColor Yellow
$AntiVirus = Get-CimInstance -ClassName AntiVirusProduct -Namespace root\SecurityCenter2

switch ($AntiVirus.productState) { 
    "262144" {$defstatus = "Up to date" ;$rtstatus = "Disabled"} 
    "262160" {$defstatus = "Out of date" ;$rtstatus = "Disabled"} 
    "266240" {$defstatus = "Up to date" ;$rtstatus = "Enabled"} 
    "266256" {$defstatus = "Out of date" ;$rtstatus = "Enabled"} 
    "393216" {$defstatus = "Up to date" ;$rtstatus = "Disabled"} 
    "393232" {$defstatus = "Out of date" ;$rtstatus = "Disabled"} 
    "393488" {$defstatus = "Out of date" ;$rtstatus = "Disabled"} 
    "397312" {$defstatus = "Up to date" ;$rtstatus = "Enabled"} 
    "397328" {$defstatus = "Out of date" ;$rtstatus = "Enabled"} 
    "397584" {$defstatus = "Out of date" ;$rtstatus = "Enabled"} 
    default {$defstatus = "Unknown" ;$rtstatus = "Unknown"} 
}

$avHash = @{
    Name=$AntiVirus.DisplayName
    Executable=$AntiVirus.pathToSignedProductExe
    DefStatus=$defstatus
    Protection=$rtstatus
}

New-Object -TypeName PSObject -Property $avHash

